import { Client, GatewayIntentBits } from 'discord.js';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const CHANNEL_ID = '1381359227561574420';
const WTF_CHANNEL_ID = '1382395197589029005';

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const blagues = [
  "Pourquoi les plongeurs plongent-ils toujours en arri√®re et jamais en avant ? Parce que sinon ils tombent dans le bateau. üòÇ",
  "Pourquoi les oiseaux ne tweetent plus ? Parce qu'ils sont sur X. üê¶",
  "J‚Äôai demand√© √† mon ordi de m‚Äô√©crire une blague‚Ä¶ il a crash√©. ü§ñ",
  "Quel est le comble pour un √©lectricien ? De ne pas √™tre au courant. ‚ö°",
  "Pourquoi les maths sont tristes ? Parce qu‚Äôelles ont trop de probl√®mes. ‚ûó",
  "Pourquoi les fant√¥mes aiment-ils les ascenseurs ? Parce que √ßa les soul√®ve. üëª",
  "Que dit un z√©ro √† un huit ? Sympa ta ceinture ! üòÇ",
  "Pourquoi les squelettes ne se battent jamais entre eux ? Parce qu‚Äôils n‚Äôont pas le cran. üíÄ",
  "Pourquoi est-ce que les pommes ne parlent jamais ? Parce qu‚Äôelles sont timides. üçé",
  "Pourquoi les chaussettes se perdent-elles toujours ? Parce qu‚Äôelles ont des trous de m√©moire. üß¶"
];

const conseils = [
  "Bois de l‚Äôeau r√©guli√®rement üíß",
  "Prends des pauses pour ton cerveau üß†",
  "Note tes id√©es avant de les oublier ‚úçÔ∏è",
  "Fais un peu de sport chaque jour pour te sentir mieux üèÉ‚Äç‚ôÇÔ∏è",
  "Mange √©quilibr√©, √ßa aide ton moral üçéü•¶",
  "Essaie la m√©ditation ou la respiration profonde üßò‚Äç‚ôÄÔ∏è",
  "Fais-toi plaisir avec un bon livre ou une s√©rie üìöüì∫",
  "Ne te compare pas aux autres, chacun avance √† son rythme üö∂‚Äç‚ôÇÔ∏è",
  "Sois gentil avec toi-m√™me, personne n‚Äôest parfait üòä",
  "Rappelle-toi de sourire, √ßa change tout ! üòÑ"
];

client.once('ready', () => {
  console.log(`‚úÖ Connect√© en tant que ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  const content = message.content.trim();

  try {
    // Commandes dans le premier channel classique
    if (message.channel.id === CHANNEL_ID) {
      if (content === '!blague') {
        const random = blagues[Math.floor(Math.random() * blagues.length)];
        return message.channel.send(`üòÇ ${random}`);
      }

      if (content === '!conseil') {
        const random = conseils[Math.floor(Math.random() * conseils.length)];
        return message.channel.send(`üí° ${random}`);
      }

      if (content.startsWith('!image') || content === '!imagealeatoire') {
        return message.channel.send('üñºÔ∏è La g√©n√©ration d‚Äôimages est d√©sactiv√©e pour le moment.');
      }

      if (content.startsWith('!anonyme')) {
        const prompt = content.slice(8).trim();
        if (!prompt) return message.channel.send('‚úâÔ∏è Utilise : `!anonyme ton message`');

        const response = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
              'Content-Type': 'application/json',
            },
          }
        );

        const reply = response.data.choices[0].message.content;
        return message.channel.send(`üì¢ **Message anonyme :**\n${reply}`);
      }

      if (content.startsWith('!gpt')) {
        const prompt = content.slice(4).trim();
        if (!prompt) return message.channel.send('üí¨ Utilise : `!gpt ta question ici`');

        const response = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
              'Content-Type': 'application/json',
            },
          }
        );

        const reply = response.data.choices[0].message.content;
        return message.channel.send(`üß† ${reply}`);
      }

      // Par d√©faut : chat normal (sans !)
      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content }],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const reply = response.data.choices[0].message.content;
      return message.channel.send(reply);
    }

    // Commandes dans le salon WTF_CHANNEL_ID
    if (message.channel.id === WTF_CHANNEL_ID) {
      // !fusion
      if (content.toLowerCase().startsWith('!fusion')) {
        const parts = content.slice(7).split('+').map(s => s.trim()).filter(Boolean);
        if (parts.length !== 2) {
          return message.channel.send('‚ùå Utilisation : `!fusion √©l√©ment1 + √©l√©ment2`');
        }

        const prompt = `Fusionne ces deux √©l√©ments en un personnage absurde, dr√¥le, style m√®me Internet :\n- √âl√©ment 1 : ${parts[0]}\n- √âl√©ment 2 : ${parts[1]}\nDonne un nom √† ce personnage et d√©cris-le en 2 phrases maximum.`;

        const response = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
              'Content-Type': 'application/json',
            },
          }
        );

        const fusionReply = response.data.choices[0].message.content;
        return message.channel.send(`ü§ñ **Fusion cr√©√©e :**\n${fusionReply}`);
      }

      // !clash
      if (content.toLowerCase().startsWith('!clash')) {
        const target = content.slice(6).trim();
        if (!target) return message.channel.send('‚ùå Utilisation : `!clash [nom de la cible]`');

        const prompt = `√âcris un clash dr√¥le et l√©ger √† propos de : ${target}. Ce clash doit √™tre humoristique, pas m√©chant, et adapt√© √† Discord.`;

        const response = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
              'Content-Type': 'application/json',
            },
          }
        );

        const clashReply = response.data.choices[0].message.content;
        return message.channel.send(`üî• **Clash :**\n${clashReply}`);
      }

      // !troll
      if (content.toLowerCase().startsWith('!troll')) {
        const target = content.slice(6).trim();
        if (!target) return message.channel.send('‚ùå Utilisation : `!troll [nom de la cible]`');

        const prompt = `√âcris un message troll amusant, l√©ger et bon enfant √† propos de : ${target}. Doit rester dr√¥le et pas m√©chant, style m√®me Discord.`;

        const response = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
              'Content-Type': 'application/json',
            },
          }
        );

        const trollReply = response.data.choices[0].message.content;
        return message.channel.send(`ü§£ **Troll :**\n${trollReply}`);
      }
    }

  } catch (error) {
    console.error('Erreur OpenAI :', error.response?.data || error.message);
    message.channel.send('‚ùå Je n‚Äôai pas r√©ussi √† r√©pondre.');
  }
});

client.login(process.env.DISCORD_TOKEN);
