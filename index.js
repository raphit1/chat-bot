import { Client, GatewayIntentBits } from 'discord.js';
import axios from 'axios';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import FormData from 'form-data';

dotenv.config();

const CHANNEL_ID = '1381359227561574420';
const DESSIN_CHANNEL_ID = '1381864670511501323';
const WTF_CHANNEL_ID = '1382395197589029005';

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const blagues = [
  "Pourquoi les plongeurs plongent-ils toujours en arri√®re et jamais en avant ? Parce que sinon ils tombent dans le bateau. üòÇ",
  "Pourquoi les oiseaux ne tweetent plus ? Parce qu'ils sont sur X. üê¶",
  "J‚Äôai demand√© √† mon ordi de m‚Äô√©crire une blague‚Ä¶ il a crash√©. ü§ñ",
  "Quel est le comble pour un √©lectricien ? De ne pas √™tre au courant. ‚ö°",
  "Pourquoi les maths sont tristes ? Parce qu‚Äôelles ont trop de probl√®mes. ‚ûó",
  "Pourquoi les fant√¥mes aiment-ils les ascenseurs ? Parce que √ßa les soul√®ve. üëª",
  "Que dit un z√©ro √† un huit ? Sympa ta ceinture ! üòÇ",
  "Pourquoi les squelettes ne se battent jamais entre eux ? Parce qu‚Äôils n‚Äôont pas le cran. üíÄ",
  "Pourquoi est-ce que les pommes ne parlent jamais ? Parce qu‚Äôelles sont timides. üçé",
  "Pourquoi les chaussettes se perdent-elles toujours ? Parce qu‚Äôelles ont des trous de m√©moire. üß¶"
];

const conseils = [
  "Bois de l‚Äôeau r√©guli√®rement üíß",
  "Prends des pauses pour ton cerveau üß†",
  "Note tes id√©es avant de les oublier ‚úçÔ∏è",
  "Fais un peu de sport chaque jour pour te sentir mieux üèÉ‚Äç‚ôÇÔ∏è",
  "Mange √©quilibr√©, √ßa aide ton moral üçéü•¶",
  "Essaie la m√©ditation ou la respiration profonde üßò‚Äç‚ôÄÔ∏è",
  "Fais-toi plaisir avec un bon livre ou une s√©rie üìöüì∫",
  "Ne te compare pas aux autres, chacun avance √† son rythme üö∂‚Äç‚ôÇÔ∏è",
  "Sois gentil avec toi-m√™me, personne n‚Äôest parfait üòä",
  "Rappelle-toi de sourire, √ßa change tout ! üòÑ"
];

client.once('ready', () => {
  console.log(`‚úÖ Connect√© en tant que ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // === FONCTION DESSIN + CLASH ===
  if (message.channel.id === DESSIN_CHANNEL_ID && message.attachments.size > 0) {
    const attachment = message.attachments.first();
    if (!attachment.contentType?.startsWith('image')) return;

    try {
      const imgResponse = await fetch(attachment.url);
      const imgBuffer = await imgResponse.arrayBuffer();
      const base64Image = Buffer.from(imgBuffer).toString('base64');

      const visionResponse = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-4-vision-preview',
          messages: [
            {
              role: 'system',
              content: "Tu es un comique qui clashe tr√®s violemment les dessins. Rends chaque clash dr√¥le, percutant, absurde ou humiliant (sans insulte grave).",
            },
            {
              role: 'user',
              content: [
                { type: 'text', text: "Clash ce dessin, vraiment fort." },
                { type: 'image_url', image_url: { url: `data:image/png;base64,${base64Image}` } }
              ],
            }
          ],
          max_tokens: 300
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const clash = visionResponse.data.choices[0].message.content;
      const wtfChannel = await client.channels.fetch(WTF_CHANNEL_ID);
      wtfChannel.send(`üéØ **Clash automatique du dessin post√© :**\n${clash}`);
    } catch (error) {
      console.error('Erreur GPT-4 Vision :', error.response?.data || error.message);
    }
    return;
  }

  // === COMMANDES CLASSIQUES (blague, conseil, GPT) ===
  if (message.channel.id !== CHANNEL_ID) return;

  const content = message.content.trim();

  try {
    if (content === '!blague') {
      const random = blagues[Math.floor(Math.random() * blagues.length)];
      return message.channel.send(`üòÇ ${random}`);
    }

    if (content === '!conseil') {
      const random = conseils[Math.floor(Math.random() * conseils.length)];
      return message.channel.send(`üí° ${random}`);
    }

    if (content.startsWith('!image') || content === '!imagealeatoire') {
      return message.channel.send('üñºÔ∏è La g√©n√©ration d‚Äôimages est d√©sactiv√©e pour le moment.');
    }

    if (content.startsWith('!anonyme')) {
      const prompt = content.slice(8).trim();
      if (!prompt) return message.channel.send('‚úâÔ∏è Utilise : `!anonyme ton message`');

      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const reply = response.data.choices[0].message.content;
      return message.channel.send(`üì¢ **Message anonyme :**\n${reply}`);
    }

    if (content.startsWith('!gpt')) {
      const prompt = content.slice(4).trim();
      if (!prompt) return message.channel.send('üí¨ Utilise : `!gpt ta question ici`');

      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const reply = response.data.choices[0].message.content;
      return message.channel.send(`üß† ${reply}`);
    }

    // Message par d√©faut trait√© par GPT
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const reply = response.data.choices[0].message.content;
    message.channel.send(reply);
  } catch (error) {
    console.error('Erreur OpenAI :', error.response?.data || error.message);
    message.channel.send('‚ùå Je n‚Äôai pas r√©ussi √† r√©pondre.');
  }
});

client.login(process.env.DISCORD_TOKEN);
